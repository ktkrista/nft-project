// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])
  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  firstName        String
  lastName         String
  phoneNumber      String?   @db.VarChar(20)
  cellNumber       String?   @db.VarChar(20)
  ethereumAddress  String    @unique
  levels           String?
  createdDate      DateTime?
  addressId        Int?
  roles            String?
  Address          Address?  @relation(fields: [addressId], references: [addressId])
  Wallet           Wallet[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@unique([identifier, token])
}

model Address {
  addressId   Int    @id @default(autoincrement())
  street      String
  city        String
  stateName   String
  zipCode     Int
  User        User[]
}

model Wallet {
  walletId          Int       @id @default(autoincrement())
  userId            String    
  ethereumBalance   Decimal?  @db.Decimal(18, 8)
  fiatBalance       Decimal?  @db.Decimal(18, 8)
  User              User      @relation(fields: [userId], references: [id])
  NftOwnership      NftOwnership[]
  TransactionsBuyer Transactions[]    @relation("TransactionsBuyer")
  TransactionsSeller Transactions[]   @relation("TransactionsSeller")
  Deposit           Deposit[]
}

model Nft {
  tokenId       String          @id
  smartContractAddress String
  name          String
  NftOwnership  NftOwnership[]
  NftDetails    NftDetails[]
  Transactions  Transactions[]
}

model NftOwnership {
  ownershipId    Int     @id @default(autoincrement())
  walletId       Int
  tokenId        String
  Wallet         Wallet  @relation(fields: [walletId], references: [walletId])
  Nft            Nft     @relation(fields: [tokenId], references: [tokenId])
}

model NftDetails {
  detailsId     Int      @id @default(autoincrement())
  tokenId       String
  mediaUrl      String
  createdDate   DateTime?
  category      String
  description   String
  Nft           Nft      @relation(fields: [tokenId], references: [tokenId])
}

model Transactions {
  transactionId        Int       @id @default(autoincrement())
  commission           Decimal?  @db.Decimal(18, 8)
  currency             String?
  buyerWalletId        Int?
  sellerWalletId       Int?
  transactionDate      DateTime?
  transactionType      String?
  transactionStatus    String?
  tokenId              String?
  commissionRate       Decimal?  @db.Decimal(18, 8)
  transactionValueEth  Decimal?  @db.Decimal(18, 8)
  marketPriceUsd       Decimal?  @db.Decimal(18, 8)
  marketPriceEth       Decimal?  @db.Decimal(18, 8)
  WalletBuyer          Wallet?   @relation("TransactionsBuyer", fields: [buyerWalletId], references: [walletId])
  WalletSeller         Wallet?   @relation("TransactionsSeller", fields: [sellerWalletId], references: [walletId])
  Nft                  Nft?      @relation(fields: [tokenId], references: [tokenId])
  CancellationLogs     CancellationLogs[]
}

model Deposit {
  depositId     Int      @id @default(autoincrement())
  walletId      Int
  amount        Decimal  @db.Decimal(18, 8)
  paymentDate   DateTime?
  paymentType   String?
  status        String?
  Wallet        Wallet   @relation(fields: [walletId], references: [walletId])
}

model CancellationLogs {
  cancellationId   Int          @id @default(autoincrement())
  transactionId    Int
  cancellationTime DateTime
  Transactions     Transactions? @relation(fields: [transactionId], references: [transactionId])
}